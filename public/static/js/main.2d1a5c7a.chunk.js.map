{"version":3,"sources":["middleware/reanimationMiddleware.js","actions/reanimation.js","reducers/reanimation.js","reducers/rootReducer.js","store/store.js","components/Home.jsx","containers/Home.js","components/Start.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["reanimationMiddleware","store","next","action","type","state","getState","console","log","dispatch","category","initialState","reanimation","initialTime","reanimationReducer","rootReducer","combineReducers","enhancers","composeWithDevTools","applyMiddleware","createStore","Home","setCategory","handleCategory","evt","currentTarget","value","className","to","color","onClick","HomeContainer","connect","Start","now","Date","getHours","getMinutes","getSeconds","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2d1a5c7a.chunk.js","sourcesContent":["import { SET_CATEGORY, updateCategory } from '../actions/reanimation';\n\nconst reanimationMiddleware = (store) => (next) => (action) => {\n  switch (action.type) {\n    case SET_CATEGORY: {\n      const state = store.getState();\n      console.log(state);\n      console.log(action);\n      store.dispatch(updateCategory(action.category));\n      break;\n    }\n    default:\n      break;\n  }\n  next(action);\n};\n\nexport default reanimationMiddleware;\n","export const SET_CATEGORY = 'SET_CATEGORY';\nexport const UPDATE_CATEGORY = 'UPDATE_CATEGORY';\nexport const SET_HOURS = 'SET_HOURS';\n\nexport const setCategory = (category) => ({\n  type: SET_CATEGORY,\n  category,\n});\n\nexport const updateCategory = (category) => ({\n  type: UPDATE_CATEGORY,\n  category,\n});\n\nexport const setHours = (date) => ({\n  type: SET_HOURS,\n  date,\n});\n","import { SET_CATEGORY, SET_HOURS } from '../actions/reanimation';\n\nconst initialState = {\n  reanimation: {\n    category: '',\n    initialTime: '',\n  },\n};\n\nconst reanimationReducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case SET_CATEGORY:\n      return {\n        ...state,\n        reanimation: {\n          ...state.reanimation,\n          category: action.category,\n        },\n      };\n    case SET_HOURS:\n      return {\n        ...state,\n        reanimation: {\n          ...state.reanimation,\n          initialTime: action.initialTime,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reanimationReducer;\n","import { combineReducers } from 'redux';\n\nimport reanimationReducer from './reanimation';\n\nconst rootReducer = combineReducers({\n  reanimation: reanimationReducer,\n});\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// middlewares\nimport reanimationMiddleware from '../middleware/reanimationMiddleware';\n// Reducer\nimport rootReducer from '../reducers/rootReducer';\n\nconst enhancers = composeWithDevTools(\n  applyMiddleware(\n    reanimationMiddleware,\n  ),\n);\nconst store = createStore(\n  rootReducer,\n  enhancers,\n);\n\nexport default store;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bulma-components/dist';\nimport PropTypes from 'prop-types';\n\nconst Home = ({ setCategory }) => {\n  const handleCategory = (evt) => {\n    // evt.preventDefault();\n    setCategory(evt.currentTarget.value);\n  };\n  return (\n    <div className=\"home\">\n      <div className=\"start\">\n        Débuter la réanimation\n        <div>\n          <Link to=\"/start\">\n            <Button color=\"primary\" value=\"new-born\" onClick={handleCategory}>\n              <span className=\"new-born\">Nouveau-né</span>\n            </Button>\n            <Button color=\"primary\" value=\"child\" onClick={handleCategory}>\n              <span className=\"child\">Enfant</span>\n            </Button>\n          </Link>\n        </div>\n      </div>\n      <div className=\"protocole\">\n        Utiliser les protocoles\n      </div>\n    </div>\n  );\n};\n\nHome.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n};\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport { setCategory } from '../actions/reanimation';\n\n\nconst mapStateToProps = (state) => ({\n  category: state.reanimation.category,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCategory: (category) => {\n    dispatch(setCategory(category));\n  },\n});\n\nconst HomeContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Home);\n\nexport default HomeContainer;\n","import React from 'react';\n// import { Link } from 'react-router-dom';\n// import { Button } from 'react-bulma-components/dist';\nimport PropTypes from 'prop-types';\n\nconst Start = () => {\n  const now = new Date();\n\n  return (\n    <div className=\"start\">\n      <p> Heure du début de la réanimation </p>\n      <p>\n        {now.getHours()}\n        :\n        {now.getMinutes()}\n        :\n        {now.getSeconds()}\n      </p>\n    </div>\n  );\n};\n\nStart.propTypes = {\n//   setCategory: PropTypes.func.isRequired,\n};\n\nexport default Start;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Home from './containers/Home';\nimport Start from './components/Start';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/start\">\n          <Start />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n        {/* <Route path=\"/chrono\">\n          <Chrono />\n        </Route> */}\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}